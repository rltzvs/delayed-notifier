// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	entity "delayed-notifier/internal/entity"
)

// NotifyCacheRepository is an autogenerated mock type for the NotifyCacheRepository type
type NotifyCacheRepository struct {
	mock.Mock
}

type NotifyCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NotifyCacheRepository) EXPECT() *NotifyCacheRepository_Expecter {
	return &NotifyCacheRepository_Expecter{mock: &_m.Mock}
}

// DeleteNotify provides a mock function with given fields: ctx, notifyID
func (_m *NotifyCacheRepository) DeleteNotify(ctx context.Context, notifyID string) error {
	ret := _m.Called(ctx, notifyID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, notifyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyCacheRepository_DeleteNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotify'
type NotifyCacheRepository_DeleteNotify_Call struct {
	*mock.Call
}

// DeleteNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - notifyID string
func (_e *NotifyCacheRepository_Expecter) DeleteNotify(ctx interface{}, notifyID interface{}) *NotifyCacheRepository_DeleteNotify_Call {
	return &NotifyCacheRepository_DeleteNotify_Call{Call: _e.mock.On("DeleteNotify", ctx, notifyID)}
}

func (_c *NotifyCacheRepository_DeleteNotify_Call) Run(run func(ctx context.Context, notifyID string)) *NotifyCacheRepository_DeleteNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NotifyCacheRepository_DeleteNotify_Call) Return(_a0 error) *NotifyCacheRepository_DeleteNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotifyCacheRepository_DeleteNotify_Call) RunAndReturn(run func(context.Context, string) error) *NotifyCacheRepository_DeleteNotify_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotify provides a mock function with given fields: ctx, notifyID
func (_m *NotifyCacheRepository) GetNotify(ctx context.Context, notifyID string) (entity.Notify, error) {
	ret := _m.Called(ctx, notifyID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotify")
	}

	var r0 entity.Notify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Notify, error)); ok {
		return rf(ctx, notifyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Notify); ok {
		r0 = rf(ctx, notifyID)
	} else {
		r0 = ret.Get(0).(entity.Notify)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, notifyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyCacheRepository_GetNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotify'
type NotifyCacheRepository_GetNotify_Call struct {
	*mock.Call
}

// GetNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - notifyID string
func (_e *NotifyCacheRepository_Expecter) GetNotify(ctx interface{}, notifyID interface{}) *NotifyCacheRepository_GetNotify_Call {
	return &NotifyCacheRepository_GetNotify_Call{Call: _e.mock.On("GetNotify", ctx, notifyID)}
}

func (_c *NotifyCacheRepository_GetNotify_Call) Run(run func(ctx context.Context, notifyID string)) *NotifyCacheRepository_GetNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NotifyCacheRepository_GetNotify_Call) Return(_a0 entity.Notify, _a1 error) *NotifyCacheRepository_GetNotify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotifyCacheRepository_GetNotify_Call) RunAndReturn(run func(context.Context, string) (entity.Notify, error)) *NotifyCacheRepository_GetNotify_Call {
	_c.Call.Return(run)
	return _c
}

// SetNotify provides a mock function with given fields: ctx, notify, ttl
func (_m *NotifyCacheRepository) SetNotify(ctx context.Context, notify entity.Notify, ttl time.Duration) error {
	ret := _m.Called(ctx, notify, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Notify, time.Duration) error); ok {
		r0 = rf(ctx, notify, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyCacheRepository_SetNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNotify'
type NotifyCacheRepository_SetNotify_Call struct {
	*mock.Call
}

// SetNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - notify entity.Notify
//   - ttl time.Duration
func (_e *NotifyCacheRepository_Expecter) SetNotify(ctx interface{}, notify interface{}, ttl interface{}) *NotifyCacheRepository_SetNotify_Call {
	return &NotifyCacheRepository_SetNotify_Call{Call: _e.mock.On("SetNotify", ctx, notify, ttl)}
}

func (_c *NotifyCacheRepository_SetNotify_Call) Run(run func(ctx context.Context, notify entity.Notify, ttl time.Duration)) *NotifyCacheRepository_SetNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Notify), args[2].(time.Duration))
	})
	return _c
}

func (_c *NotifyCacheRepository_SetNotify_Call) Return(_a0 error) *NotifyCacheRepository_SetNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotifyCacheRepository_SetNotify_Call) RunAndReturn(run func(context.Context, entity.Notify, time.Duration) error) *NotifyCacheRepository_SetNotify_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotifyCacheRepository creates a new instance of NotifyCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifyCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotifyCacheRepository {
	mock := &NotifyCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
