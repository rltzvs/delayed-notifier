// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	entity "delayed-notifier/internal/entity"
)

// NotifyService is an autogenerated mock type for the NotifyService type
type NotifyService struct {
	mock.Mock
}

type NotifyService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotifyService) EXPECT() *NotifyService_Expecter {
	return &NotifyService_Expecter{mock: &_m.Mock}
}

// CreateNotify provides a mock function with given fields: ctx, notify
func (_m *NotifyService) CreateNotify(ctx context.Context, notify entity.Notify) (entity.Notify, error) {
	ret := _m.Called(ctx, notify)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotify")
	}

	var r0 entity.Notify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Notify) (entity.Notify, error)); ok {
		return rf(ctx, notify)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Notify) entity.Notify); ok {
		r0 = rf(ctx, notify)
	} else {
		r0 = ret.Get(0).(entity.Notify)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Notify) error); ok {
		r1 = rf(ctx, notify)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyService_CreateNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotify'
type NotifyService_CreateNotify_Call struct {
	*mock.Call
}

// CreateNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - notify entity.Notify
func (_e *NotifyService_Expecter) CreateNotify(ctx interface{}, notify interface{}) *NotifyService_CreateNotify_Call {
	return &NotifyService_CreateNotify_Call{Call: _e.mock.On("CreateNotify", ctx, notify)}
}

func (_c *NotifyService_CreateNotify_Call) Run(run func(ctx context.Context, notify entity.Notify)) *NotifyService_CreateNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Notify))
	})
	return _c
}

func (_c *NotifyService_CreateNotify_Call) Return(_a0 entity.Notify, _a1 error) *NotifyService_CreateNotify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotifyService_CreateNotify_Call) RunAndReturn(run func(context.Context, entity.Notify) (entity.Notify, error)) *NotifyService_CreateNotify_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotify provides a mock function with given fields: ctx, notifyID
func (_m *NotifyService) DeleteNotify(ctx context.Context, notifyID string) error {
	ret := _m.Called(ctx, notifyID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, notifyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyService_DeleteNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotify'
type NotifyService_DeleteNotify_Call struct {
	*mock.Call
}

// DeleteNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - notifyID string
func (_e *NotifyService_Expecter) DeleteNotify(ctx interface{}, notifyID interface{}) *NotifyService_DeleteNotify_Call {
	return &NotifyService_DeleteNotify_Call{Call: _e.mock.On("DeleteNotify", ctx, notifyID)}
}

func (_c *NotifyService_DeleteNotify_Call) Run(run func(ctx context.Context, notifyID string)) *NotifyService_DeleteNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NotifyService_DeleteNotify_Call) Return(_a0 error) *NotifyService_DeleteNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotifyService_DeleteNotify_Call) RunAndReturn(run func(context.Context, string) error) *NotifyService_DeleteNotify_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotify provides a mock function with given fields: ctx, notifyID
func (_m *NotifyService) GetNotify(ctx context.Context, notifyID string) (entity.Notify, error) {
	ret := _m.Called(ctx, notifyID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotify")
	}

	var r0 entity.Notify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Notify, error)); ok {
		return rf(ctx, notifyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Notify); ok {
		r0 = rf(ctx, notifyID)
	} else {
		r0 = ret.Get(0).(entity.Notify)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, notifyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyService_GetNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotify'
type NotifyService_GetNotify_Call struct {
	*mock.Call
}

// GetNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - notifyID string
func (_e *NotifyService_Expecter) GetNotify(ctx interface{}, notifyID interface{}) *NotifyService_GetNotify_Call {
	return &NotifyService_GetNotify_Call{Call: _e.mock.On("GetNotify", ctx, notifyID)}
}

func (_c *NotifyService_GetNotify_Call) Run(run func(ctx context.Context, notifyID string)) *NotifyService_GetNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NotifyService_GetNotify_Call) Return(_a0 entity.Notify, _a1 error) *NotifyService_GetNotify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotifyService_GetNotify_Call) RunAndReturn(run func(context.Context, string) (entity.Notify, error)) *NotifyService_GetNotify_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotifyStatus provides a mock function with given fields: ctx, notifyID, status
func (_m *NotifyService) UpdateNotifyStatus(ctx context.Context, notifyID string, status string) error {
	ret := _m.Called(ctx, notifyID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotifyStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, notifyID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyService_UpdateNotifyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotifyStatus'
type NotifyService_UpdateNotifyStatus_Call struct {
	*mock.Call
}

// UpdateNotifyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - notifyID string
//   - status string
func (_e *NotifyService_Expecter) UpdateNotifyStatus(ctx interface{}, notifyID interface{}, status interface{}) *NotifyService_UpdateNotifyStatus_Call {
	return &NotifyService_UpdateNotifyStatus_Call{Call: _e.mock.On("UpdateNotifyStatus", ctx, notifyID, status)}
}

func (_c *NotifyService_UpdateNotifyStatus_Call) Run(run func(ctx context.Context, notifyID string, status string)) *NotifyService_UpdateNotifyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NotifyService_UpdateNotifyStatus_Call) Return(_a0 error) *NotifyService_UpdateNotifyStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotifyService_UpdateNotifyStatus_Call) RunAndReturn(run func(context.Context, string, string) error) *NotifyService_UpdateNotifyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotifyService creates a new instance of NotifyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotifyService {
	mock := &NotifyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
